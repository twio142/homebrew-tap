name: Build bottles

on:
  pull_request:
    branches:
      - main
    paths:
      - "Formula/**.rb"
  workflow_dispatch:
    inputs:
      formula:
        description: Formula to build bottle for
        required: false

env:
  REPO: ${{ github.repository }}

permissions:
  contents: write
  pull-requests: write
  checks: write

jobs:
  prep:
    runs-on: macos-latest
    outputs:
      formula: ${{ steps.get-info.outputs.formula }}
      version: ${{ steps.get-info.outputs.version }}
      branch: ${{ steps.get-info.outputs.branch }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - id: get-info
        env:
          HOMEBREW_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: ${{ github.event_name == 'pull_request' && github.head_ref || github.ref_name }}
        run: |
          set -euo pipefail

          if [ -n "${{ github.event.inputs.formula }}" ]; then
            FORMULA="${{ github.event.inputs.formula }}"
            FORMULA_FILE="Formula/${FORMULA}.rb"
            if [ ! -f "$FORMULA_FILE" ]; then
              echo "::error::Formula file $FORMULA_FILE does not exist."
              exit 1
            fi
          else
            FORMULA_FILE=$(git diff --name-only origin/main...HEAD | grep "Formula/.*\\.rb" | head -n1)
            if [ -z "$FORMULA_FILE" ]; then
              echo "::error::Could not find a changed formula file in git diff."
              exit 1
            fi
            FORMULA=$(basename "$FORMULA_FILE" .rb)
          fi

          echo "Formula to build: $FORMULA"

          brew tap "${REPO}"
          cp -f "$FORMULA_FILE" "$(brew --repo "$REPO")/Formula"

          VERSION=$(brew info --json --formula "$REPO/$FORMULA" | jq -r '.[0].versions.stable')

          # If running on main branch, create a new one to bypass branch protection rules
          if [ "$BRANCH" == "main" ]; then
            BRANCH="bump-${FORMULA}-${VERSION}-$(date +%s)"
          fi

          {
            echo "formula=$FORMULA"
            echo "version=$VERSION"
            echo "branch=$BRANCH"
          } >> "$GITHUB_OUTPUT"

  test-bot:
    needs: prep
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]
    continue-on-error: true
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: Homebrew/actions/setup-homebrew@main

      - name: Build and upload bottle
        id: build
        env:
          HOMEBREW_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FORMULA: ${{ needs.prep.outputs.formula }}
          VERSION: ${{ needs.prep.outputs.version }}
        run: |
          set -euo pipefail

          ROOT_URL="https://github.com/$REPO/releases/download/$FORMULA-v$VERSION"
          brew test-bot --skip-setup --testing-formulae "$REPO/$FORMULA"
          brew bottle --json --root-url="$ROOT_URL" "$REPO/$FORMULA"

          TARBALL=$(ls -- *.bottle*.tar.gz)
          JSON_FILE=$(ls -- *.bottle.json)
          BOTTLE=$(jq -r '.. | .filename? | select(.)' "$JSON_FILE" | head -n 1)
          mv "$TARBALL" "$BOTTLE"

      - name: Upload bottle and JSON
        uses: actions/upload-artifact@v4
        with:
          name: bottles-${{ matrix.os }}
          path: |
            *.bottle*.tar.gz
            *.bottle.json

  release:
    needs: [prep, test-bot]
    if: success() || failure()
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download all bottle artifacts
        uses: actions/download-artifact@v4
        with:
          path: bottles
          pattern: bottles-*
          merge-multiple: true

      - name: Release
        id: release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HOMEBREW_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FORMULA: ${{ needs.prep.outputs.formula }}
          VERSION: ${{ needs.prep.outputs.version }}
        run: |
          set -euo pipefail

          if [ -z "$(ls bottles/*.tar.gz 2>/dev/null)" ]; then
            echo "::error::No bottles were built."
            exit 1
          fi

          TAG="$FORMULA-v$VERSION"
          if ! gh release view "$TAG" &>/dev/null; then
            gh release create "$TAG" --title "$FORMULA v$VERSION"
          fi
          gh release upload "$TAG" bottles/*.tar.gz --clobber

          brew tap "$REPO"
          ROOT_URL="https://github.com/$REPO/releases/download/$FORMULA-v$VERSION"
          brew bottle --merge --write --no-commit --root-url="$ROOT_URL" bottles/*.bottle.json
          cp -f "$(brew --repo "$REPO")/Formula/$FORMULA.rb" Formula/

          if [ -z "$(git status --porcelain Formula/"$FORMULA".rb)" ]; then
            echo "::error::Formula file not updated after bottling."
            exit 1
          fi

      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "${{ needs.prep.outputs.formula }} ${{ needs.prep.outputs.version }} bottle block [skip ci]"
          file_pattern: "Formula/${{ needs.prep.outputs.formula }}.rb"
          branch: ${{ needs.prep.outputs.branch }}

      - name: Create "release" check run for the pushed commit
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branch = '${{ needs.prep.outputs.branch }}';
            const sha = require('child_process')
              .execFileSync('git', ['fetch', 'origin', `refs/heads/${branch}:refs/remotes/origin/${branch}`], { encoding: 'utf-8' })
              .trim();

            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'release',
              head_sha: sha,
              status: 'completed',
              conclusion: 'success',
              output: {
                title: 'release',
                summary: 'Release workflow completed and produced the release commit'
              }
            });
